{"version":3,"sources":["components/Editor.tsx","reportWebVitals.ts","index.tsx"],"names":["HtmlElementId","HtmlClassName","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","printUrl","text","JSON","stringify","InitState","keyMap","Map","Editor","props","editorKit","configureEditorKit","delegate","EditorKitDelegate","setEditorRawText","setState","clearUndoHistory","getElementsBySelector","EditorKit","mode","supportsFilesafe","handleChange","state","reason","startsWith","includes","saveText","document","saveNote","onEditorValueChanged","error","console","log","onBlur","e","onFocus","onKeyDown","set","key","get","preventDefault","onKeyUp","delete","getDocument","parse","this","className","snComponent","id","tabIndex","showUI","showMenu","showPages","showStyles","showTools","showZoom","darkMode","onChange","React","Component","ReactDOM","render","StrictMode","getElementById"],"mappings":"6bAKYA,EAKAC,E,yCCIGC,G,MAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,wEDJFH,K,2BAAAA,E,qBAAAA,M,cAKAC,K,2BAAAA,E,uCAAAA,M,KAKL,IAODU,EAAe,CACnBC,UAAU,EACVC,KAAMC,KAAKC,UAAUC,MAGnBC,EAAS,IAAIC,IAEIC,E,kDAGnB,WAAYC,GAAyB,IAAD,8BAClC,cAAMA,IAHRC,eAEoC,IAMpCC,mBAAqB,WACnB,IAAIC,EAAW,IAAIC,oBAAkB,CAEnCC,iBAAkB,SAACZ,GACjB,EAAKa,SAAL,2BACKf,GADL,IAEEE,WAGJc,iBAAkB,aAClBC,sBAAuB,iBAAM,MAK/B,EAAKP,UAAY,IAAIQ,YAAU,CAC7BN,SAAUA,EACVO,KAAM,YACNC,kBAAkB,KAxBc,EA4BpCC,aAAe,SAACC,EAAkBC,GAMhC,GAAKA,EAAL,EAIIA,EAAOC,WAAW,qBAFM,CAAC,kBAEoCC,SAASF,KACxE,EAAKG,SAASvB,KAAKC,UAAUkB,EAAMK,aAvCH,EA4CpCD,SAAW,SAACxB,GACV,EAAK0B,SAAS1B,IA7CoB,EAuDpC0B,SAAW,SAAC1B,GAIV,IACE,EAAKQ,UAAUmB,qBAAqB3B,GACpC,MAAO4B,GACPC,QAAQC,IAAI,qBAAsBF,KA9DF,EAkEpCG,OAAS,SAACC,KAlE0B,EAoEpCC,QAAU,SAACD,KApEyB,EAsEpCE,UAAY,SAACF,GACX5B,EAAO+B,IAAIH,EAAEI,KAAK,GAEdhC,EAAOiC,IAAI,YAAcjC,EAAOiC,IAAI,MACtCL,EAAEM,kBA1E8B,EA8EpCC,QAAU,SAACP,GACT5B,EAAOoC,OAAOR,EAAEI,MA/EkB,EAkFpCK,YAAc,SAACzC,GACb,IAAKA,EACH,OAAOG,IAGT,IAAIsB,EAAuBtB,IAC3B,IACEsB,EAAWxB,KAAKyC,MAAM1C,GACtB,SACAyB,EAAWtB,IAGb,OAAOsB,GA5FP,EAAKhB,qBACL,EAAKW,MAAQtB,EAHqB,E,qDAiG1B,IACAE,EAAS2C,KAAKvB,MAAdpB,KACR,OACE,qBACE4C,UACEzD,EAAc0D,aAAeF,KAAKvB,MAAMrB,SAAW,aAAe,IAEpE+C,GAAI3D,EAAc0D,YAClBE,SAAU,EALZ,SAOE,cAAC,IAAD,CACEC,QAAQ,EACRC,UAAU,EACVC,WAAW,EACXC,YAAY,EACZC,WAAW,EACXC,UAAU,EACVC,UAAU,EACVC,SAAUZ,KAAKxB,aACfM,SAAUkB,KAAKF,YAAYzC,W,GAvHDwD,IAAMC,W,MEtB1CC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFnC,SAASoC,eAAe,SAM1BxE,M","file":"static/js/main.c49f6d64.chunk.js","sourcesContent":["import React from 'react';\nimport { EditorKit, EditorKitDelegate } from 'sn-editor-kit';\nimport { Tldraw, TldrawApp, TDDocument } from '@tldraw/tldraw';\nimport * as InitState from './initial-state.json';\n\nexport enum HtmlElementId {\n  snComponent = 'sn-component',\n  textarea = 'textarea',\n}\n\nexport enum HtmlClassName {\n  snComponent = 'sn-component',\n  textarea = 'sk-input contrast textarea',\n}\n\nexport const TLDrawContentDescription = 'tldraw content \\n';\n\nexport interface EditorInterface {\n  printUrl: boolean;\n  text: string;\n}\n\nconst initialState = {\n  printUrl: false,\n  text: JSON.stringify(InitState.document),\n};\n\nlet keyMap = new Map();\n\nexport default class Editor extends React.Component<{}, EditorInterface> {\n  editorKit: any;\n\n  constructor(props: EditorInterface) {\n    super(props);\n    this.configureEditorKit();\n    this.state = initialState;\n  }\n\n  configureEditorKit = () => {\n    let delegate = new EditorKitDelegate({\n      /** This loads every time a different note is loaded */\n      setEditorRawText: (text: string) => {\n        this.setState({\n          ...initialState,\n          text,\n        });\n      },\n      clearUndoHistory: () => {},\n      getElementsBySelector: () => [],\n    });\n\n    // TODO: Patch with first line description.\n\n    this.editorKit = new EditorKit({\n      delegate: delegate,\n      mode: 'plaintext',\n      supportsFilesafe: false,\n    });\n  };\n\n  handleChange = (state: TldrawApp, reason: string | undefined): void => {\n    // console.log(state, reason);\n    // console.log(reason);\n    // [Resolved] Bug here: Text on sticky notes not saved if\n    // you move away from the note / page, unless\n    // session:complete is fired by some other action\n    if (!reason) return;\n\n    const triggerSaveCommands = ['updated_shapes'];\n\n    if (reason.startsWith('session:complete') || triggerSaveCommands.includes(reason)) {\n      this.saveText(JSON.stringify(state.document));\n      // console.log('Saved: ' + reason);\n    }\n  };\n\n  saveText = (text: string) => {\n    this.saveNote(text);\n\n    /** State managed within tldraw app, so we only need to\n     * load state on start up, not after every change\n     */\n    // this.setState({\n    //   text: text,\n    // });\n  };\n\n  saveNote = (text: string) => {\n    /** This will work in an SN context, but breaks the standalone editor,\n     * so we need to catch the error\n     */\n    try {\n      this.editorKit.onEditorValueChanged(text);\n    } catch (error) {\n      console.log('Error saving note:', error);\n    }\n  };\n\n  onBlur = (e: React.FocusEvent) => {};\n\n  onFocus = (e: React.FocusEvent) => {};\n\n  onKeyDown = (e: React.KeyboardEvent | KeyboardEvent) => {\n    keyMap.set(e.key, true);\n    // Do nothing if 'Control' and 's' are pressed\n    if (keyMap.get('Control') && keyMap.get('s')) {\n      e.preventDefault();\n    }\n  };\n\n  onKeyUp = (e: React.KeyboardEvent | KeyboardEvent) => {\n    keyMap.delete(e.key);\n  };\n\n  getDocument = (text: string): TDDocument => {\n    if (!text) {\n      return InitState.document;\n    }\n\n    let document: TDDocument = InitState.document;\n    try {\n      document = JSON.parse(text);\n    } catch {\n      document = InitState.document;\n    }\n\n    return document as TDDocument;\n  };\n\n  render() {\n    const { text } = this.state;\n    return (\n      <div\n        className={\n          HtmlElementId.snComponent + (this.state.printUrl ? ' print-url' : '')\n        }\n        id={HtmlElementId.snComponent}\n        tabIndex={0}\n      >\n        <Tldraw\n          showUI={true}\n          showMenu={true}\n          showPages={false}\n          showStyles={true}\n          showTools={true}\n          showZoom={true}\n          darkMode={true}\n          onChange={this.handleChange}\n          document={this.getDocument(text)}\n        />\n      </div>\n    );\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport reportWebVitals from './reportWebVitals';\n\nimport Editor from './components/Editor';\nimport './stylesheets/main.scss';\nReactDOM.render(\n  <React.StrictMode>\n    <Editor />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n// console.log\n"],"sourceRoot":""}